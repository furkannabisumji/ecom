// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  products  Product[]
  addresses Address[]
  orders Order[]
  cart Cart[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price Int
  base_price Int? 
  slug String @unique
  cart_items CartItem[]
  orders_items OrderItem[]
  image String? @unique
  video String? @unique
  video_status VideoStatus @default(UNAVAILABLE)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum VideoStatus {
  UNAVAILABLE
  UNPROCESSED
  PROCESSED
}

enum Role {
  USER
  SELLER
  ADMIN
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id        Int       @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart      @relation(fields: [cartId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id        Int    @id @default(autoincrement())
  userId    Int    
  name      String
  street    String
  city      String
  state     String
  postalCode String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orders Order[]
  user      User @relation(fields: [userId], references: [id])
}

model Order {
  id          Int       @id @default(autoincrement())
  userId      Int      
  addressId   Int       
  status      OrderStatus @default(PENDING) 
  gateway_transaction_id String?
  totalAmount Float    
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  address     Address   @relation(fields: [addressId], references: [id])
  orderItems  OrderItem[]
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float     // Price at the time of purchase (for historical accuracy)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  order     Order     @relation(fields: [orderId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}
